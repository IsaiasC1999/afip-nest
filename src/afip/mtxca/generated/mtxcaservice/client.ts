import { Client as SoapClient, createClientAsync as soapCreateClientAsync, IExOptions as ISoapExOptions } from "soap";
import { TnsdummyResponseType } from "./definitions/TnsdummyResponseType";
import { TnsautorizarComprobanteRequestType } from "./definitions/TnsautorizarComprobanteRequestType";
import { TnsautorizarComprobanteResponseType } from "./definitions/TnsautorizarComprobanteResponseType";
import { TnssolicitarCaeaRequestType } from "./definitions/TnssolicitarCaeaRequestType";
import { TnssolicitarCaeaResponseType } from "./definitions/TnssolicitarCaeaResponseType";
import { TnsinformarComprobanteCaeaRequestType } from "./definitions/TnsinformarComprobanteCaeaRequestType";
import { TnsinformarComprobanteCaeaResponseType } from "./definitions/TnsinformarComprobanteCaeaResponseType";
import { TnsconsultarUltimoComprobanteAutorizadoRequestType } from "./definitions/TnsconsultarUltimoComprobanteAutorizadoRequestType";
import { TnsconsultarUltimoComprobanteAutorizadoResponseType } from "./definitions/TnsconsultarUltimoComprobanteAutorizadoResponseType";
import { TnsconsultarComprobanteRequestType } from "./definitions/TnsconsultarComprobanteRequestType";
import { TnsconsultarComprobanteResponseType } from "./definitions/TnsconsultarComprobanteResponseType";
import { TnsconsultarTiposComprobanteRequestType } from "./definitions/TnsconsultarTiposComprobanteRequestType";
import { TnsconsultarTiposComprobanteResponseType } from "./definitions/TnsconsultarTiposComprobanteResponseType";
import { TnsconsultarTiposDocumentoRequestType } from "./definitions/TnsconsultarTiposDocumentoRequestType";
import { TnsconsultarTiposDocumentoResponseType } from "./definitions/TnsconsultarTiposDocumentoResponseType";
import { TnsconsultarAlicuotasIvaRequestType } from "./definitions/TnsconsultarAlicuotasIvaRequestType";
import { TnsconsultarAlicuotasIvaResponseType } from "./definitions/TnsconsultarAlicuotasIvaResponseType";
import { TnsconsultarCondicionesIvaRequestType } from "./definitions/TnsconsultarCondicionesIvaRequestType";
import { TnsconsultarCondicionesIvaResponseType } from "./definitions/TnsconsultarCondicionesIvaResponseType";
import { TnsconsultarMonedasRequestType } from "./definitions/TnsconsultarMonedasRequestType";
import { TnsconsultarMonedasResponseType } from "./definitions/TnsconsultarMonedasResponseType";
import { TnsconsultarCotizacionMonedaRequestType } from "./definitions/TnsconsultarCotizacionMonedaRequestType";
import { TnsconsultarCotizacionMonedaResponseType } from "./definitions/TnsconsultarCotizacionMonedaResponseType";
import { TnsconsultarUnidadesMedidaRequestType } from "./definitions/TnsconsultarUnidadesMedidaRequestType";
import { TnsconsultarUnidadesMedidaResponseType } from "./definitions/TnsconsultarUnidadesMedidaResponseType";
import { TnsconsultarTiposTributoRequestType } from "./definitions/TnsconsultarTiposTributoRequestType";
import { TnsconsultarTiposTributoResponseType } from "./definitions/TnsconsultarTiposTributoResponseType";
import { TnsconsultarPuntosVentaRequestType } from "./definitions/TnsconsultarPuntosVentaRequestType";
import { TnsconsultarPuntosVentaResponseType } from "./definitions/TnsconsultarPuntosVentaResponseType";
import { TnsconsultarPuntosVentaCaeRequestType } from "./definitions/TnsconsultarPuntosVentaCaeRequestType";
import { TnsconsultarPuntosVentaResponseType1 } from "./definitions/TnsconsultarPuntosVentaResponseType1";
import { TnsconsultarPuntosVentaCaeaRequestType } from "./definitions/TnsconsultarPuntosVentaCaeaRequestType";
import { TnsconsultarPuntosVentaResponseType2 } from "./definitions/TnsconsultarPuntosVentaResponseType2";
import { TnsinformarCaeaNoUtilizadoRequestType } from "./definitions/TnsinformarCaeaNoUtilizadoRequestType";
import { TnsinformarCaeaNoUtilizadoResponseType } from "./definitions/TnsinformarCaeaNoUtilizadoResponseType";
import { TnsinformarCaeaNoUtilizadoPtoVtaRequestType } from "./definitions/TnsinformarCaeaNoUtilizadoPtoVtaRequestType";
import { TnsinformarCaeaNoUtilizadoPtoVtaResponseType } from "./definitions/TnsinformarCaeaNoUtilizadoPtoVtaResponseType";
import { TnsconsultarPtosVtaCaeaNoInformadosRequestType } from "./definitions/TnsconsultarPtosVtaCaeaNoInformadosRequestType";
import { TnsconsultarPtosVtaCaeaNoInformadosResponseType } from "./definitions/TnsconsultarPtosVtaCaeaNoInformadosResponseType";
import { TnsconsultarCaeaRequestType } from "./definitions/TnsconsultarCaeaRequestType";
import { TnsconsultarCaeaResponseType } from "./definitions/TnsconsultarCaeaResponseType";
import { TnsconsultarCaeaEntreFechasRequestType } from "./definitions/TnsconsultarCaeaEntreFechasRequestType";
import { TnsconsultarCaeaEntreFechasResponseType } from "./definitions/TnsconsultarCaeaEntreFechasResponseType";
import { TnsautorizarAjusteIvaRequestType } from "./definitions/TnsautorizarAjusteIvaRequestType";
import { TnsautorizarAjusteIvaResponseType } from "./definitions/TnsautorizarAjusteIvaResponseType";
import { TnsinformarAjusteIvacaeaRequestType } from "./definitions/TnsinformarAjusteIvacaeaRequestType";
import { TnsinformarAjusteIvacaeaResponseType } from "./definitions/TnsinformarAjusteIvacaeaResponseType";
import { TnsconsultarTiposDatosAdicionalesRequestType } from "./definitions/TnsconsultarTiposDatosAdicionalesRequestType";
import { TnsconsultarTiposDatosAdicionalesResponseType } from "./definitions/TnsconsultarTiposDatosAdicionalesResponseType";
import { TnsconsultarActividadesVigentesRequestType } from "./definitions/TnsconsultarActividadesVigentesRequestType";
import { TnsconsultarActividadesVigentesResponseType } from "./definitions/TnsconsultarActividadesVigentesResponseType";
import { TnsconsultarCondicionesIvaReceptorRequestType } from "./definitions/TnsconsultarCondicionesIvaReceptorRequestType";
import { TnsconsultarCondicionesIvaReceptorResponseType } from "./definitions/TnsconsultarCondicionesIvaReceptorResponseType";
import { MtxcaService } from "./services/MtxcaService";

export interface MtxcaServiceClient extends SoapClient {
    MtxcaService: MtxcaService;
    dummyAsync(dummyRequest: {}, options?: ISoapExOptions): Promise<[result: TnsdummyResponseType, rawResponse: any, soapHeader: any, rawRequest: any]>;
    autorizarComprobanteAsync(autorizarComprobanteRequest: TnsautorizarComprobanteRequestType, options?: ISoapExOptions): Promise<[result: TnsautorizarComprobanteResponseType, rawResponse: any, soapHeader: any, rawRequest: any]>;
    solicitarCAEAAsync(solicitarCaeaRequest: TnssolicitarCaeaRequestType, options?: ISoapExOptions): Promise<[result: TnssolicitarCaeaResponseType, rawResponse: any, soapHeader: any, rawRequest: any]>;
    informarComprobanteCAEAAsync(informarComprobanteCaeaRequest: TnsinformarComprobanteCaeaRequestType, options?: ISoapExOptions): Promise<[result: TnsinformarComprobanteCaeaResponseType, rawResponse: any, soapHeader: any, rawRequest: any]>;
    consultarUltimoComprobanteAutorizadoAsync(consultarUltimoComprobanteAutorizadoRequest: TnsconsultarUltimoComprobanteAutorizadoRequestType, options?: ISoapExOptions): Promise<[result: TnsconsultarUltimoComprobanteAutorizadoResponseType, rawResponse: any, soapHeader: any, rawRequest: any]>;
    consultarComprobanteAsync(consultarComprobanteRequest: TnsconsultarComprobanteRequestType, options?: ISoapExOptions): Promise<[result: TnsconsultarComprobanteResponseType, rawResponse: any, soapHeader: any, rawRequest: any]>;
    consultarTiposComprobanteAsync(consultarTiposComprobanteRequest: TnsconsultarTiposComprobanteRequestType, options?: ISoapExOptions): Promise<[result: TnsconsultarTiposComprobanteResponseType, rawResponse: any, soapHeader: any, rawRequest: any]>;
    consultarTiposDocumentoAsync(consultarTiposDocumentoRequest: TnsconsultarTiposDocumentoRequestType, options?: ISoapExOptions): Promise<[result: TnsconsultarTiposDocumentoResponseType, rawResponse: any, soapHeader: any, rawRequest: any]>;
    consultarAlicuotasIVAAsync(consultarAlicuotasIvaRequest: TnsconsultarAlicuotasIvaRequestType, options?: ISoapExOptions): Promise<[result: TnsconsultarAlicuotasIvaResponseType, rawResponse: any, soapHeader: any, rawRequest: any]>;
    consultarCondicionesIVAAsync(consultarCondicionesIvaRequest: TnsconsultarCondicionesIvaRequestType, options?: ISoapExOptions): Promise<[result: TnsconsultarCondicionesIvaResponseType, rawResponse: any, soapHeader: any, rawRequest: any]>;
    consultarMonedasAsync(consultarMonedasRequest: TnsconsultarMonedasRequestType, options?: ISoapExOptions): Promise<[result: TnsconsultarMonedasResponseType, rawResponse: any, soapHeader: any, rawRequest: any]>;
    consultarCotizacionMonedaAsync(consultarCotizacionMonedaRequest: TnsconsultarCotizacionMonedaRequestType, options?: ISoapExOptions): Promise<[result: TnsconsultarCotizacionMonedaResponseType, rawResponse: any, soapHeader: any, rawRequest: any]>;
    consultarUnidadesMedidaAsync(consultarUnidadesMedidaRequest: TnsconsultarUnidadesMedidaRequestType, options?: ISoapExOptions): Promise<[result: TnsconsultarUnidadesMedidaResponseType, rawResponse: any, soapHeader: any, rawRequest: any]>;
    consultarTiposTributoAsync(consultarTiposTributoRequest: TnsconsultarTiposTributoRequestType, options?: ISoapExOptions): Promise<[result: TnsconsultarTiposTributoResponseType, rawResponse: any, soapHeader: any, rawRequest: any]>;
    consultarPuntosVentaAsync(consultarPuntosVentaRequest: TnsconsultarPuntosVentaRequestType, options?: ISoapExOptions): Promise<[result: TnsconsultarPuntosVentaResponseType, rawResponse: any, soapHeader: any, rawRequest: any]>;
    consultarPuntosVentaCAEAsync(consultarPuntosVentaCaeRequest: TnsconsultarPuntosVentaCaeRequestType, options?: ISoapExOptions): Promise<[result: TnsconsultarPuntosVentaResponseType1, rawResponse: any, soapHeader: any, rawRequest: any]>;
    consultarPuntosVentaCAEAAsync(consultarPuntosVentaCaeaRequest: TnsconsultarPuntosVentaCaeaRequestType, options?: ISoapExOptions): Promise<[result: TnsconsultarPuntosVentaResponseType2, rawResponse: any, soapHeader: any, rawRequest: any]>;
    informarCAEANoUtilizadoAsync(informarCaeaNoUtilizadoRequest: TnsinformarCaeaNoUtilizadoRequestType, options?: ISoapExOptions): Promise<[result: TnsinformarCaeaNoUtilizadoResponseType, rawResponse: any, soapHeader: any, rawRequest: any]>;
    informarCAEANoUtilizadoPtoVtaAsync(informarCaeaNoUtilizadoPtoVtaRequest: TnsinformarCaeaNoUtilizadoPtoVtaRequestType, options?: ISoapExOptions): Promise<[result: TnsinformarCaeaNoUtilizadoPtoVtaResponseType, rawResponse: any, soapHeader: any, rawRequest: any]>;
    consultarPtosVtaCAEANoInformadosAsync(consultarPtosVtaCaeaNoInformadosRequest: TnsconsultarPtosVtaCaeaNoInformadosRequestType, options?: ISoapExOptions): Promise<[result: TnsconsultarPtosVtaCaeaNoInformadosResponseType, rawResponse: any, soapHeader: any, rawRequest: any]>;
    consultarCAEAAsync(consultarCaeaRequest: TnsconsultarCaeaRequestType, options?: ISoapExOptions): Promise<[result: TnsconsultarCaeaResponseType, rawResponse: any, soapHeader: any, rawRequest: any]>;
    consultarCAEAEntreFechasAsync(consultarCaeaEntreFechasRequest: TnsconsultarCaeaEntreFechasRequestType, options?: ISoapExOptions): Promise<[result: TnsconsultarCaeaEntreFechasResponseType, rawResponse: any, soapHeader: any, rawRequest: any]>;
    autorizarAjusteIVAAsync(autorizarAjusteIvaRequest: TnsautorizarAjusteIvaRequestType, options?: ISoapExOptions): Promise<[result: TnsautorizarAjusteIvaResponseType, rawResponse: any, soapHeader: any, rawRequest: any]>;
    informarAjusteIVACAEAAsync(informarAjusteIvacaeaRequest: TnsinformarAjusteIvacaeaRequestType, options?: ISoapExOptions): Promise<[result: TnsinformarAjusteIvacaeaResponseType, rawResponse: any, soapHeader: any, rawRequest: any]>;
    consultarTiposDatosAdicionalesAsync(consultarTiposDatosAdicionalesRequest: TnsconsultarTiposDatosAdicionalesRequestType, options?: ISoapExOptions): Promise<[result: TnsconsultarTiposDatosAdicionalesResponseType, rawResponse: any, soapHeader: any, rawRequest: any]>;
    consultarActividadesVigentesAsync(consultarActividadesVigentesRequest: TnsconsultarActividadesVigentesRequestType, options?: ISoapExOptions): Promise<[result: TnsconsultarActividadesVigentesResponseType, rawResponse: any, soapHeader: any, rawRequest: any]>;
    consultarCondicionesIVAReceptorAsync(consultarCondicionesIvaReceptorRequest: TnsconsultarCondicionesIvaReceptorRequestType, options?: ISoapExOptions): Promise<[result: TnsconsultarCondicionesIvaReceptorResponseType, rawResponse: any, soapHeader: any, rawRequest: any]>;
}

/** Create MtxcaServiceClient */
export function createClientAsync(...args: Parameters<typeof soapCreateClientAsync>): Promise<MtxcaServiceClient> {
    return soapCreateClientAsync(args[0], args[1], args[2]) as any;
}
